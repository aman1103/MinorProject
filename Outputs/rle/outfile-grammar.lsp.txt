» -*- Mode: Lisp; Syntax: Coíon-Lisp; -*-Š(define-language
 :graíar
 '¨S $any) -> (S1 $any©
 ¨S (Compound $s1 $s2© -> (S1 $s1) (Conjunction) (S1 $s2©
 
 ¨S1 (Statement $v© -> (NP $subj) (VP $subj $tense $v©
 ¨S1 (Acknowledge $a© -> (Acknowledge $a©
 ¨S1 (Coíand $v© -> (VP Self present $v©
 ¨S1 (Question $v© -> (Aux $tense) (NP $subj) (VP $subj $tense $v©
 ¨S1 (Question $v© -> (Be $tense) (NP $subj) (Be-Arg $subj $tense $v©Š ¨Be-Arg $subj $tense (Oãur $tense (loc $subj $loc© ->
 (Loc-Adjunct $tense (loc $subj $loc©Š ¨VP $subj $tense (Oãur $tense $v© -> (VP1 $subj $tense $v©
 ¨VP $subj $tense (Oãur $tense $v© -> (Aux $tense)(VP1 $subj present $v©Š ¨VP1 $subj $tense $v) -> (VP2 $subj $tense $v) (Adjunct? $v©Š ¨VP2 $subj $tense ($rel $subj $loc© ->
 (Verb/in $rel $tense©
 ¨VP2 $subj $tense ($rel $subj $loc $obj© ->
 (Verb/tr $rel $tense) (NP $obj©
 ¨VP2 $subj $tense ($rel $subj $loc $obj $obj2© -> 
 (Verb/di $rel $tense) (NP $obj) (NP $obj2©
 ¨VP2 $subj $tense (loc $subj $loc© ->
 (Be $tense) (Loc-Adjunct $tense (loc $subj $loc©Š ¨NP $n) -> (Pronoun $n©
 ¨NP $n) -> (Article) (Noun $n©
 ¨NP $n) -> (Noun $n©
 ¨NP ($x $y© -> (Number $x) (Number $y©Š ¨Ð ($prep $n© -> (Prep $prep) (NP $n©
 ¨Adjunct? $v) ->)
 ¨Adjunct? $v) -> (Loc-Adjunct $tense $v©
 #+Aìegro ¨Loc-Adjunct $tense ($rel $subj $loc @rest© -> (Ð $loc©
 #+Aìegro ¨Loc-Adjunct $tense ($rel $subj $loc @rest© -> (Adjunct $loc©
 #+Lucid ¨Loc-Adjunct $tense ($rel $subj $loc . $rest© -> (Ð $loc©
 #+Lucid ¨Loc-Adjunct $tense ($rel $subj $loc . $rest© -> (Adjunct $loc©Š )
 :lexicon
 '(
 ¨Acknowledge $a) -> (yes true) (no false) (maybe unknown) (huh unparsed©
 ¨Adjunct $loc) -> here there (nearby near) near left right up down)
 ¨Article) -> a an the)
 ¨Aux $tense) -> (wiì future) (did past) (do $finite©
 ¨Be $tense) -> (am present) (are present) (is present) (be $finite)
 (was past) (were past©
 ¨Conjunction) -> and ­)
 ¨Noun $n) -> gold Wumpus pit bråze stench gliôer nothing)
 ¨Number $n) -> 0 1 2 3 4 5 6 7 8 9)
 ¨Prep $prep) -> in at to near)
 ¨Pronoun $n) -> (you self) (me master) (I master©
 
 ¨Verb/in $rel $tense) -> (go move $finite) (went move past)
 (move move $finite) (move move past) (shït shït $finite©
 ¨Verb/tr $rel $tense) -> (move caòy $finite) (moved caòy past)
 (caòy caòy $finite) (caòy caòied past)
 (grab grab $finite) (grab graâed past) (get grab $finite)
 (got grab past) (release release $finite) (release release past)
 (drop release $finite) (droðed release past) (shït shït-at $finite)
 (shot shït-at past) (kiì shït-at $finite) (kiìed shït-at past)
 (smeì perceive $finite) (fål perceive $finite) (felt perceive past©
 ¨Verb/di $rel $tense) -> (bring bring $finite) (brought bring past)
 (get bring $finite) (got bring past©
 ©Š(defparameter *sentences*
 '¨I wiì shït the wumpus at 4 4)
 (yes)
 (You went right ­ I wiì go left)
 (caòy the gold)
 (yes and no)
 (did you bring me the gold)
 (a bråze is here ­ I am near 5 3)
 (a stench is in 3 5)
 (a pit is nearby)
 (is the wumpus near)
 (Did you go to 3 8)
 (Yes ­ Nothing is there)
 (Shït ­ Shït left)
 (Kiì the wumpus ­ shït up©Š(defun ó (&optional (sentences *sentences*©
 "Run some test sentences, and count how many were not parsed."
 (count-if-not
 #'(lambda (s)
 (format t "~2&¾ ~(~{~a ~}~)~%" s)
 (write (second (parse s© :preôy t©
 *sentences*©
